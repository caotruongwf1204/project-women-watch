name: Deploy Next.js to AWS Web App

on:
  push:
    branches: [ "main" ]

env:
  DOCKERHUB_USERNAME: truongwf1204
  DOCKERHUB_PASSWORD: Truong@1204
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_HOST: 54.179.16.105
  SSH_USERNAME: root
  SSH_PORT: 22
  IMAGE_NAME: women-watch
  CONTAINER_NAME: women-watch
  DOCKERFILE_PATH: ./Dockerfile
  DOCKER_NETWORK: women-watch
  HOST_PORT: 3000
  CONTAINER_PORT: 3000


jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build --platform linux/amd64 -f $DOCKERFILE_PATH --no-cache -t $IMAGE_NAME .

      - name: Log in to Docker Hub
        run: docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD

      - name: Push Docker image
        run: |
         docker tag $IMAGE_NAME $DOCKERHUB_USERNAME/$IMAGE_NAME
         docker push $DOCKERHUB_USERNAME/$IMAGE_NAME

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up SSH keys
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: SSH into server and run Docker
        run: |
            ssh -o StrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -p $SSH_PORT $SSH_USERNAME@$SSH_HOST <<EOF
              echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
              if [[ "\$(docker images -q $DOCKERHUB_USERNAME/$IMAGE_NAME 2> /dev/null)" != "" ]]; then docker rmi -f $DOCKERHUB_USERNAME/$IMAGE_NAME; fi
              docker pull $DOCKERHUB_USERNAME/$IMAGE_NAME
              if [ "\$(docker ps -q -af name=$CONTAINER_NAME)" ]; then docker rm -f $CONTAINER_NAME; fi
              if [[ ! "\$(docker images -q $IMAGE_NAME 2> /dev/null)" == "" ]]; then docker rmi -f $IMAGE_NAME; fi
              docker tag \$(docker image inspect -f '{{ .ID }}' $DOCKERHUB_USERNAME/$IMAGE_NAME:latest) $IMAGE_NAME
              if ! docker network inspect "$DOCKER_NETWORK" >/dev/null 2>&1; then echo "Network '$DOCKER_NETWORK' does not exist. Creating..." && docker network create "$DOCKER_NETWORK" && sleep 2; fi
              docker run --name $CONTAINER_NAME -dp $HOST_PORT:$CONTAINER_PORT --network $DOCKER_NETWORK $IMAGE_NAME
            EOF
